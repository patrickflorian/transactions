import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react'
import io from 'socket.io-client'
import { Socket } from 'socket.io-client'
import { GetServerSidePropsContext, GetServerSidePropsResult } from 'next'
import TransactionService from '../services/transactions.services'
import { Transaction, TransactionListResponse } from '../store/types'
let socket: Socket;
import moment from 'moment';
import Pagination from '../components/Pagination.component'
import { useRouter } from 'next/router'

interface Props {
  items?: TransactionListResponse
}

export async function getServerSideProps(
  context: GetServerSidePropsContext
): Promise<GetServerSidePropsResult<Props>> {
  const { locale, query, req } = context;
  const { page = 1, per_page = 10, keyword = '' } = query;
  let items = [];
  const errors: any[] = [];

  //load product details
  const loadData = async () => {
    return TransactionService.getAll({ page, per_page, keyword }).then((res: any) => {
      return res.json();
    });
  };

  //Construct ssr Props
  try {
    items = await loadData();
    // @ts-ignore

  } catch (e) {
    console.log(e)
    // @ts-ignore
    //errors.push(e?.message())
    return {
      props: {}
    };
  }
  return {
    props: {
      items
    }
  };
}


export default function Home(props: Props) {

  const items = props.items;
  const [input, setInput] = useState('');
  const router = useRouter();

  const socketInitializer = async () => {
    await fetch('/api/socket');
    socket = io()

    socket.on('connect', () => {
      console.log('connected')
    })

    socket.on('update', msg => {
      console.log(msg)
      setInput(msg)
    })
  }

  const onChangeHandler = (e: any) => {
    socket?.emit('input-change', e.target.value)
  }

  const handlePageClick = (nextPage: number) => {
    router.push(`/?page=${nextPage}`)
  };


  useEffect(() => {
    socketInitializer()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Transaction App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
          <table className="min-w-full divide-y divide-gray-300">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">
                  id
                </th>
                <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">
                  receiver
                </th>
                <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">
                  Amount
                </th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                  sender
                </th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                  confirmed
                </th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                  timestamp
                </th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                  Date ajout
                </th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                  Latest Update
                </th>
                <th scope="col" className="px-3 py-3.5 text-right text-sm font-semibold text-gray-900">
                  Action
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 bg-white">
              {(items?.items ?? []).map((person, index) => {
                console.log(person);
                return(
                <tr key={person?.id ?? index}>
                  <td onClick={() => {

                  }}
                    className="text-sm cursor-pointer text-gray-500">
                    <div className="">
                      {person?.id}
                    </div>
                  </td>
                  <td>
                    <div className="ml-4">
                      <div
                        className="font-medium text-gray-900">{person?.receiver}</div>

                    </div>
                  </td>
                  <td><div className="text-gray-500">{person?.value}</div></td>
                  <td><div className="text-gray-500">{person?.sender}</div></td>
                  <td><div className="text-gray-500">{person?.confirmed ? 'Yes' : 'no'}</div></td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    {person?.timestamp ?? ""}
                  </td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    {moment(person?.createdAt ?? new Date()).format('LL')}
                  </td>

                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    {moment(person?.updatedAt ?? new Date()).format('LL')}
                  </td>
                </tr>
              )})}
            </tbody>
          </table>
        </div>

      </main >

      {items?.totalPages !== undefined && items?.totalPages > 1 && (
        <Pagination
          breakLabel="..."
          nextLabel="nächste >"
          onPageChange={handlePageClick}
          pageRangeDisplayed={3}
          pageCount={items?.totalPages}
          previousLabel="< früher"
          currentPage={items?.currentPage ?? 1}
          perPage={ 10}
          total={items?.totalPages ?? 0}
        />
      )}

      <footer className={styles.footer}>

      </footer>
    </div >
  )
}
